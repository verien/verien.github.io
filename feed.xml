<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verien's blog</title>
    <description>This is a personal blog of Verien on Github Pages.</description>
    <link>https://verien.github.io/</link>
    <atom:link href="https://verien.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 27 Oct 2016 14:52:34 +0800</pubDate>
    <lastBuildDate>Thu, 27 Oct 2016 14:52:34 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Rails - 套用樣板 - 使用Bootstrap</title>
        <description>&lt;p&gt;原網址： http://blog.bro.tw/post/2016/02/04/472931&lt;/p&gt;

&lt;p&gt;記得一個不錯的比喻提到，給網站包裝就像面試要穿衣服一樣，別裸奔就出去見人啊～所以，要把自己的網站demo給別人看之前，總是要替網站穿個衣服，最好用Landing page來包裝一下啊～
所以，我就在 網路上挑選了一個喜歡的樣板，把它套到自己的網站上當landing page，順便了解前端的一些操作，包括rails assets的一些使用方法。這篇就是紀錄我整個套板解雷的過程。
正文開始
找到並下載喜歡的樣板&lt;/p&gt;

&lt;p&gt;我是到startbootstrap內，挑選到自己喜歡的樣式並下載，而我上圖中是修改自這款Agency。
把它塞進rails view&lt;/p&gt;

&lt;p&gt;解壓縮檔案後，我們把index.html的body中整塊複製貼到我們rails的view當中，接下來就要搞定三個部分：stylesheets、javascripts、images。
stylesheets&lt;/p&gt;

&lt;p&gt;css
上面截圖link的部分，我們知道它link進來的”順序”。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bootstrap，這部分用rails gem bootstrap-sass。
agency，要把它放到我們assets/stylesheets的路徑下，還要把它import進來。
font-awesome，這部分有rails gem font-awesome-rails代替。
google-fonts，外部的字型連結就不用管它了。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/assets/stylesheets/application.css.scss&lt;/p&gt;

&lt;p&gt;/*
 *= require_tree .
 *= require_self
 */
@import “bootstrap”;&lt;/p&gt;

&lt;p&gt;@import “bootstrap-sprockets”;&lt;/p&gt;

&lt;p&gt;@import “landing/agency”;&lt;/p&gt;

&lt;p&gt;@import “font-awesome”;&lt;/p&gt;

&lt;p&gt;我agency.css放置的路徑在app/assets/stylesheets/landing/，
要注意！這import的順序會有影響，但影響在哪？
下圖左：把agency擺到bootstrap上面，部分格式就跑掉了。
螢幕快照 2016-02-04 下午1.53.28.png
這部分被順序影響，是因為它們在某些格式的設定有重複的情況，後者會覆蓋掉前者。
這邊弄好，基本上畫面的格式就完成了，只剩動態的畫面以及圖片都找不到。
javascripts&lt;/p&gt;

&lt;p&gt;js
js file
這邊有load一個jquery-easing，我用rails gem jquery-easing-rails。
把一些要load進來的js全部丟到javascripts的目錄下即可，這邊比較不會有像css有重複定義的問題。
app/assets/javascripts/application.js&lt;/p&gt;

&lt;p&gt;//= require jquery
//= require bootstrap-sprockets
//= require jquery_ujs
//= require jquery.easing
//= require turbolinks
//= require_tree .&lt;/p&gt;

&lt;p&gt;images&lt;/p&gt;

&lt;p&gt;上面兩個步驟完成後，接著就是把圖片整組複製到assets/images目錄下，最後就是換掉view裡面的連結：
例如使用來替代原本的img tag：&amp;lt;%= image_tag “landing/portfolio/roundicons-free.png”,class: “img-responsive” %&amp;gt;。
img file
這也有一個地方要注意！就是藏在css裡面的圖片路徑也要記得換掉，agency.css當中就有兩個圖片要更改路徑：我把agency.css改成agency.css.erb，讓它也能使用image_tag來更換路徑。
layout&lt;/p&gt;

&lt;p&gt;我把landing page與我們一般的頁面分開，並把外部的一些link也都補進來，例如google-fonts的部分。
app/controllers/pages_controller.rb&lt;/p&gt;

&lt;p&gt;class PagesController &amp;lt; ApplicationController
    layout ‘landing’,only: :landing
  def index
  end
  def landing
  end
end&lt;/p&gt;

&lt;p&gt;app/views/layouts/landing.html.erb&lt;/p&gt;

&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Bro.tw ｜&lt;/title&gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
  &amp;lt;%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&amp;gt; true %&amp;gt;
  &lt;link href=&quot;https://fonts.googleapis.com/css?family=Montserrat:400,700&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
  &lt;link href=&quot;https://fonts.googleapis.com/css?family=Kaushan+Script&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
  &lt;link href=&quot;https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic,700italic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
  &lt;link href=&quot;https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
  &lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;
  &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;

&lt;/head&gt;
&lt;body id=&quot;page-top&quot; class=&quot;index&quot;&gt;
&amp;lt;%= yield %&amp;gt;
&amp;lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =&amp;gt; true %&amp;gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;開始到完成，會發現整個過程不是很難，但其實剛開始解壓縮跑出一堆檔案我有被嚇到。想說它為什麼有這麼多檔案，但開始把它抓進來用，便發現沒有那麼多檔案需要用，檔案中大都是備份的檔案，真正需要的就是css,js,img的部分。在修改assets/stylesheets時，才知道import的順序會有影響，原先都是讓它自己抓根目錄下面的css，但畫面長得不一樣，後來強制使用import來給它順序，結果才正確。最後，在修改圖片路徑的部分，也很容易miss掉放在css檔案中的路徑，透過修改路徑的過程中才知道可以把css改成css.erb用helper給它路徑。&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 20:38:00 +0800</pubDate>
        <link>https://verien.github.io/rails-form-templates-using-the-bootstrap/</link>
        <guid isPermaLink="true">https://verien.github.io/rails-form-templates-using-the-bootstrap/</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails 命名慣例</title>
        <description>&lt;p&gt;約定優於配置是Rails三大哲學之一。Rails中充滿了很多約定，本頁面對遇到的約定做一個總結。&lt;/p&gt;

&lt;p&gt;單複數的約定:&lt;/p&gt;

&lt;p&gt;Model用單數因為它表示一個對像如User，
Database用複數因為它存放的是對象的集合，
Controller用複數因為它是對對象集合的操作。&lt;/p&gt;

&lt;p&gt;Routes.rb中定義session一般用resource :session，而不是普通的resources :sessions。因為一般只會操作當前用戶的session，不會操作所有session，所以不能定義為複數。
即如果一個請求一個資源時不需要指定ID，就在routes中用單數，如/profile顯示當前登錄用戶的信息，這樣你可以使用單數的/profile而不是/profile/:id。
也可以用match “profile” =&amp;gt; “users#show”&lt;/p&gt;

&lt;p&gt;變量名的單複數和大小寫問題:&lt;/p&gt;

&lt;p&gt;首字母大小寫是無關緊要的, 最終產生的結果是一致的.
model一般都用單數, 複數的model會有歧義, 比如當你創建model的一個實例的時候, 會覺得你在創建多個實例
其它很多地方用複數形式, 比如數據表的名字, 比如routes中的url形式以及url的名稱等等.
既然很多地方都用複數, 那麼不如統一用複數形式. 另外經過檢驗, 統一用單數的方式有點行不通, 到restful routes那塊跟Rails現有的設計有衝突. 那麼索性就統一用複數形式好了.&lt;/p&gt;

&lt;p&gt;最終的解決方案:
大小寫問題已經沒有爭議了, 都用小寫即可
單複數問題: model名字用單數, 其它場合都用複數&lt;/p&gt;

&lt;p&gt;文件名的單複數問題:&lt;/p&gt;

&lt;p&gt;經過觀察, rails所有的常見的文件名都是小寫的. 所以大小寫的問題沒有爭議, 都用小寫即可.
但是單複數問題不太統一, 比如users_contoller.rb, model/user_spec.rb.
這邊總結的規律是:
Model: 單數居多. 比如model文件, model_spec文件等等
Controller: 複數居多. 比如users_contoller文件, request/users_spec文件等等.
View: 複數居多，因為view的文件的創建是在創建contoller的時候自動創建的, 所以它跟contoller基本上是一致的.比如javascripts/users.js.coffee
其它: 單複數都可以.&lt;/p&gt;

&lt;p&gt;其它:&lt;/p&gt;

&lt;p&gt;Controller中可以用變量request，然後可以得到session, request_info, head, method等請求信息
.與#使用慣例：在閱讀書時經常會遇到User.all, users#show這樣的表示，其中的點. 與井號#使用也是有約定的，點.用於調用類方法，井號#用於調用實例方法。&lt;/p&gt;

&lt;p&gt;原文網址: http://dearjohn.iteye.com/blog/1625078&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Dec 2015 03:00:00 +0800</pubDate>
        <link>https://verien.github.io/rails-name-rule/</link>
        <guid isPermaLink="true">https://verien.github.io/rails-name-rule/</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails - MVC架構</title>
        <description>&lt;h1 id=&quot;mvc&quot;&gt;MVC架構&lt;/h1&gt;

&lt;p&gt;『網頁』跟『網站』製作最大的差別，在於前者只有 純讀取 資訊的功能
後者可以運作 CRUD 功能，讓系統功能強大
但從前者走向後者，整個系統的規劃與運作就會變得非常龐大與複雜&lt;/p&gt;

&lt;p&gt;為了方便可以區分功能與團隊分工合作將一個網站專案建立起來
近代的網站開發走向了 MVC 架構：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Models&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Views&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Controllers&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;功能&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;資料庫相關&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;前端網頁呈現&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;流程控制與運作&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;優點是什麼？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以把整個專案(Project)拆分&lt;/li&gt;
  &lt;li&gt;負責做前端的人只做 Views&lt;/li&gt;
  &lt;li&gt;寫流程控制的專心寫 Controllers&lt;/li&gt;
  &lt;li&gt;所有資料相關集中在 Models&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三者之間不互相打架，出問題與狀況也容易追出問題的位置&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ruby on Rails 就是用 Ruby 這個程式語言寫出來的網站 MVC 框架(Framework)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;延伸閱讀:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://rails101s.logdown.com/posts/210714-mvc-restful&quot;&gt;MVC 架構與 RESTful 概念&lt;/a&gt;
http://kakas-blog.logdown.com/posts/686323-what-is-the-rest-finishing
http://kakas-blog.logdown.com/posts/385422-user-stroy-data-sorting
Ruby on Rails 學習資源整理 (http://kakas-blog.logdown.com/posts/288866-ruby-on-rails-learning-resource-consolidation)&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 14:40:00 +0800</pubDate>
        <link>https://verien.github.io/mvc/</link>
        <guid isPermaLink="true">https://verien.github.io/mvc/</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails - Gem (持續更新)</title>
        <description>&lt;ol&gt;
  &lt;li&gt;gem “devise”
    &lt;ul&gt;
      &lt;li&gt;一套使用者認證(Authentication)套件，是Rails社群中最廣為使用的一套。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gem “bootstrap”
    &lt;ul&gt;
      &lt;li&gt;熱門的網站開發用的前端 CSS 套件。
 	  ‘bootstrap/affix’
  ‘bootstrap/alert’
  ‘bootstrap/button’
  ‘bootstrap/carousel’
  ‘bootstrap/collapse’
  ‘bootstrap/dropdown’
  ‘bootstrap/modal’
  ‘bootstrap/popover’
  ‘bootstrap/scrollspy’
  ‘bootstrap/tab’
  ‘bootstrap/tooltip’
  ‘bootstrap/transition’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gem “simple_form”
    &lt;ul&gt;
      &lt;li&gt;讓表單寫起來更乾淨，也支援 bootstrap 樣式，也支援 devise。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gem “carrierwave”
    &lt;ul&gt;
      &lt;li&gt;Carrierwave是Rails應用程式裡面上傳檔案的簡單工具，上傳的檔案種類不限。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gem “mini_magick”
    &lt;ul&gt;
      &lt;li&gt;針對圖片進行一些處理，尤其是像是等比例縮放這種事情更是難不倒它。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gem “font-awesome-rails”
    &lt;ul&gt;
      &lt;li&gt;字體&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 14 Dec 2015 01:35:00 +0800</pubDate>
        <link>https://verien.github.io/gem/</link>
        <guid isPermaLink="true">https://verien.github.io/gem/</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails - 編輯器Sublime</title>
        <description>&lt;p&gt;Sublime Text&lt;/p&gt;

&lt;p&gt;下載位址：http://www.sublimetext.com/&lt;/p&gt;

&lt;p&gt;2 或 3 都可以
安裝 Package Control&lt;/p&gt;

&lt;p&gt;http://wbond.net/sublime_packages/package_control/installation&lt;/p&gt;

&lt;p&gt;之後可以透過 Cmd + Shift + p 叫出來選單。
Package Control&lt;/p&gt;

&lt;p&gt;Cmd + Shift + p -&amp;gt; Install …
Tab size&lt;/p&gt;

&lt;p&gt;Sublime Text 設定, Settings - User =&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  	&quot;ensure_newline_at_eof_on_save&quot;: true,
  	&quot;tab_size&quot;: 2,
&quot;show_full_path&quot;: true,
  	&quot;translate_tabs_to_spaces&quot;: true,
  	&quot;trim_trailing_white_space_on_save&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定完成，即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;自動把 tab 轉成 2 個半型空白
自動砍掉多餘的行尾空白 (trailing space)
自動在檔案最後一行加上換行
顯示完整路徑名稱
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必裝 Submlime Text2 套件
自動對 Ruby 縮排&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BeautifyRuby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ctrl + Cmd + k 自動對 Ruby 縮排
自動顯示 git diff&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GitGutter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html.erb 快速鍵&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERB-Sublime-Snippets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或是 sdlong 修改版的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERB-Sublime-Snippets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Solarized 佈景&lt;/p&gt;

&lt;p&gt;Cmd + Shift + p -&amp;gt; Install …&lt;/p&gt;

&lt;p&gt;選擇 Solarized Theme 佈景安裝。再透過 Preferences -&amp;gt; Color Scheme，換成 Solarize 布景
在終端機上直接呼叫 Sublime 開指定的檔案 / 資料夾&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sublime 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指令:&lt;/p&gt;

&lt;p&gt;用 bash: (底下是一整行的指令，只是被網頁斷行)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;alias subl=&quot;\&quot;/Applications/Sublime\\ Text\\ 2 .app/Contents/SharedSupport/bin/subl\&quot;&quot;&quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 zsh: (底下是一整行的指令，只是被網頁斷行)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;alias subl=&quot;\&quot;/Applications/Sublime\\ Text\\ 2.app/Contents/SharedSupport/bin/subl\&quot;&quot;&quot; &amp;gt;&amp;gt; ~/.zshrc

sublime 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指令:&lt;/p&gt;

&lt;p&gt;用 bash: (底下是一整行的指令，只是被網頁斷行)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;alias subl=&quot;\&quot;/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl\&quot;&quot;&quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 zsh: (底下是一整行的指令，只是被網頁斷行)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;alias subl=&quot;\&quot;/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl\&quot;&quot;&quot; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然後重開終端機即可使用&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Dec 2015 14:35:00 +0800</pubDate>
        <link>https://verien.github.io/sublime/</link>
        <guid isPermaLink="true">https://verien.github.io/sublime/</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails - 建立一個新的專案</title>
        <description>&lt;h1 id=&quot;rails-&quot;&gt;&lt;strong&gt;建立一個新 Rails 專案&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;rails &lt;em&gt;X.X.X&lt;/em&gt; new Project_name -T 後面的 “-T” 是指不安裝內建的 test unit&lt;/p&gt;

&lt;p&gt;cd Project_name&lt;/p&gt;

&lt;p&gt;git init&lt;/p&gt;

&lt;p&gt;git add .&lt;/p&gt;

&lt;p&gt;git commit -m “Initial Commit”&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Dec 2015 20:36:00 +0800</pubDate>
        <link>https://verien.github.io/project-created/</link>
        <guid isPermaLink="true">https://verien.github.io/project-created/</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails - 環境安裝</title>
        <description>&lt;p&gt;為什麼我會想學Rails呢?&lt;/p&gt;

&lt;p&gt;我對於事物總有一套看法。
在寫程式時更甚之，我喜歡有條有理，有規則可循。
然而我在接觸過多種程式語言後，才發現現實的殘酷，一度想要放棄尋找。
最後終於在學長的推薦下，發現了RAILS這套框架。&lt;/p&gt;

&lt;p&gt;這是一套適合強迫症患者的框架阿!!
我看到的時候就直覺我跟RAILS很合拍，細分每個資料夾、寫作方法嚴格規範。
這造就了其易讀性、可維護性，雖然也有不少缺點，但對我來說利大於弊阿!!!
.
.
.
說了這麼多，爬了一些資料後我才發覺WINDOWS好像不大方便寫RAILS阿。
為此我去買了一台MAC來使用。(噴淚)&lt;/p&gt;

&lt;p&gt;大抵上我都是照著 &lt;a href=&quot;http://zh-tw.railsbridge.org/%E8%A3%9D%E6%A9%9F%E8%B6%B4-installfest/&quot;&gt;“RailsBridge 裝機趴 Installfest”&lt;/a&gt; 做的。&lt;/p&gt;

&lt;p&gt;還必須多多練習呢。&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Dec 2015 04:25:00 +0800</pubDate>
        <link>https://verien.github.io/mac/</link>
        <guid isPermaLink="true">https://verien.github.io/mac/</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails - 我的Ruby on Rails之路</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;什麼是Ruby on Rails?
&lt;img alt=&quot;ruby-on-rails-bc9ab2af8d92eb4e7eb3211d548a09ad.png&quot; src=&quot;http://user-image.logdown.io/user/16858/blog/16226/post/736769/MfyQGWO8TetZpNedNaKJ_ruby-on-rails-bc9ab2af8d92eb4e7eb3211d548a09ad.png&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ruby on Rails是一套Web開發框架。是使用Ruby這套開放原始碼(採用MIT授權)、物件導向程式語言所開發的Web開發框架，主要用於開發資料庫網站應用程式。Rails是一套專業的開發框架，採用了MVC(Model-View-Control)模式、內建支援單元測試和整合測試、支援Ajax和RESTful介面、ORM機制，以及支援各種最新的業界標準像是HTML5、JQuery等等功能。它的發明人是David Heinemeier Hanson(DHH)，DHH是2004年將Rails從37signals商業產品中獨立出來成為開源專案。&lt;/p&gt;

&lt;p&gt;它的設計目標是只要開發者熟悉它的慣例，它就可以讓網站開發變的非常容易。而相對於其他程式語言和框架，Rails可以讓你用更少的程式碼達成更多的功能，它甚至讓網站開發變得更有趣。&lt;/p&gt;

&lt;p&gt;Rails的哲學包括以下指導原則：
    1.不要重複自己(DRY: Don’t Repeat Yourself) – 撰寫出重複的程式碼是件壞事
    2.慣例勝於設定(Convention Over Configuration) – Rails會預設各種好的設定跟慣例，而不是要求你設定每一個細節到設定檔中。
    3.REST是網站應用程式的最佳模式 – 使用Resources和標準的HTTP verbs(動詞)來組織你的應用程式是最快的方式(我們會在路徑一章詳細介紹這個強大的設計)&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 05:32:00 +0800</pubDate>
        <link>https://verien.github.io/ruby-on-rails/</link>
        <guid isPermaLink="true">https://verien.github.io/ruby-on-rails/</guid>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
